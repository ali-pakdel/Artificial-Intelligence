# -*- coding: utf-8 -*-
"""AI_CA0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1968chAeCaU8pA_2uJWdRhdfgxTRFvcSG

# **تمرین کامپیوتری صفر**
### **علی پاکدل صمدی**

### **۸۱۰۱۹۸۳۶۸**

**۱.**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import time
import scipy.stats as stats
from shapely.geometry import LineString

df = pd.read_csv('bank_term_deposit.csv')

print(df.info())
print(df.head())
print(df.tail())
print(df.describe())

"""**۲.**"""

print(df.info())

df['marital'] = df['marital'].replace(to_replace= 'divorced', value= 0)
df['marital'] = df['marital'].replace(to_replace= 'single', value= 1)
df['marital'] = df['marital'].replace(to_replace= 'married', value= 2)

print(df['marital'])

"""**۳.**"""

print(df.isna().sum())

age_mean = df['age'].mean()
df['age'] = df['age'].replace(to_replace= np.nan, value= age_mean)

marital_mode = df['marital'].mode()
df['marital'] = df['marital'].replace(to_replace= np.nan, value= marital_mode[0])

balance_mean = df['balance'].mean()
df['balance'] = df['balance'].replace(to_replace= np.nan, value= balance_mean)

housing_mode = df['housing'].mode()
df['housing'] = df['housing'].replace(to_replace= np.nan, value= housing_mode[0])

duration_mean = df['duration'].mean()
df['duration'] = df['duration'].replace(to_replace= np.nan, value= duration_mean)

new_df = df.loc[df['y'].isna()]
df = df.dropna()
print(df.isna().sum())

"""**۴.**"""

housing_vals = df['housing'].values

yes = housing_vals == 'yes'
no = housing_vals == 'no'

housing_yes = df.loc[yes, 'housing'].count()
housing_no = df.loc[no, 'housing'].count()

print("Number of people that have housing loan: ", housing_yes)
print("Number of people that don't have housing loan: ", housing_no)

y_vals = df['y'].values

yes = y_vals == 'yes'
no = y_vals == 'no'

y_yes = df.loc[yes, 'y'].count()
y_no = df.loc[no, 'y'].count()

print("Number of people that have term deposits: ", y_yes)
print("Number of people that don't have term deposits: ", y_no)

"""**۵.**"""

age_vals = df['age'].values
marital_vals = df['marital'].values
poutcome_vals = df['poutcome'].values

age_higher35 = age_vals > 35
single = marital_vals == 1
poutcome_success = poutcome_vals == 'success'

criterias = df[age_higher35 & single & poutcome_success]

print("Number of single people with age higher than 35 and have been successfull in poutcome: ", len(criterias))

"""**۶.**"""

start = time.time()

education_vals = df['education'].values

sec_education = education_vals == 'secondary'
sec_edu_mean = df.loc[sec_education, 'balance'].mean()

print("Balance mean of people with secondary education: ", sec_edu_mean)

end = time.time()
vectorization_time = end - start
print("Time taken with vectorization: ", vectorization_time)

"""**۷.**"""

start = time.time()

balance_sum = 0
sec_edu_count = 0

size = len(df.index)

for i in range (0, size):
  if df['education'].values[i] == 'secondary':
    balance_sum += df['balance'].values[i]
    sec_edu_count += 1

print("Balance mean of people with secondary education: ", balance_sum / sec_edu_count)

end = time.time()
loop_time = end - start
print("Time taken with loop: ", loop_time)

print("Efficiency of vectorization method: ", loop_time / vectorization_time)

"""**۸.**"""

cols = ['age', 'job', 'marital', 'education', 'balance', 'housing', 'loan', 'duration', 'campaign', 'pdays', 'poutcome', 'y']
for col in cols:
  df[col].hist()
  plt.title(col)
  if col == 'job':
    plt.xticks(rotation='vertical')
  plt.show()

"""**۹.**"""

cols = ['age', 'balance', 'duration', 'campaign', 'pdays']

for col in cols:
  col_mean = df[col].mean()
  col_std = df[col].std()
  df[col] = (df[col] - col_mean) / col_std

df

"""**۱۰.**"""

y_vals = df['y'].values

y_yes = y_vals == 'yes'
y_no = y_vals == 'no'

cols = ['age', 'balance', 'duration', 'campaign', 'pdays']
for col in cols:
  yes_col_mean = df.loc[y_yes, col].mean()
  yes_col_std = df.loc[y_yes, col].std()

  no_col_mean = df.loc[y_no, col].mean()
  no_col_std = df.loc[y_no, col].std()

  yes_norm = stats.norm(yes_col_mean, yes_col_std)
  no_norm = stats.norm(no_col_mean, no_col_std)

  plt.plot(df[col].sort_values(), yes_norm.pdf(df[col].sort_values()), label="Yes")
  plt.plot(df[col].sort_values(), no_norm.pdf(df[col].sort_values()), label="No")
  plt.title(col)
  plt.legend(loc= "best")
  plt.show()

"""**۱۱.**"""

y_vals = df['y'].values

y_yes = y_vals == 'yes'
y_no = y_vals == 'no'

yes_dur_mean = df.loc[y_yes, 'duration'].mean()
yes_dur_std = df.loc[y_yes, 'duration'].std()

no_dur_mean = df.loc[y_no, 'duration'].mean()
no_dur_std = df.loc[y_no, 'duration'].std()

yes_dur_norm = stats.norm(yes_dur_mean, yes_dur_std)
no_dur_norm = stats.norm(no_dur_mean, no_dur_std)

yes_dur_graph = LineString(np.column_stack((df['duration'].sort_values(), yes_dur_norm.pdf(df['duration'].sort_values()))))
no_dur_graph = LineString(np.column_stack((df['duration'].sort_values(), no_dur_norm.pdf(df['duration'].sort_values()))))
intersection = yes_dur_graph.intersection(no_dur_graph)

new_dur_mean = new_df['duration'].mean()
new_dur_std = new_df['duration'].std()

temp_dur = new_df['duration'].copy()

new_df['duration'] = (new_df['duration'] - new_dur_mean) / new_dur_std

higher_dur = new_df['duration'] >= intersection.x
lower_dur = new_df['duration'] < intersection.x

new_df.loc[higher_dur,'y'] = 'yes'
new_df.loc[lower_dur, 'y'] = 'no'
new_df['duration'] = temp_dur
new_df.to_csv("estimated_output.csv")
new_df